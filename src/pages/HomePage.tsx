import React, { useState, useEffect, useCallback } from 'react';
import { chatService } from '@/lib/chat';
import type { Message } from '../../worker/types';
import { Card, CardContent } from '@/components/ui/card';
import { CrtEffect } from '@/components/CrtEffect';
import { TerminalInput } from '@/components/TerminalInput';
import { TerminalOutput } from '@/components/TerminalOutput';
import { BootSequence } from '@/components/BootSequence';
export default function HomePage() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [streamingMessage, setStreamingMessage] = useState('');
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isBooting, setIsBooting] = useState(true);
  const loadHistory = useCallback(async () => {
    setIsLoading(true);
    const response = await chatService.getMessages();
    if (response.success && response.data) {
      if (response.data.messages.length === 0) {
        const initialAiMessage: Message = {
          id: crypto.randomUUID(),
          role: 'assistant',
          content: `Connection established.\nWelcome to the Digital Archive of the Grand Lodge.\nI am the Archivist. How may I assist your search for light?\n\nType 'help' for a list of commands.`,
          timestamp: Date.now(),
        };
        setMessages([initialAiMessage]);
      } else {
        setMessages(response.data.messages);
      }
    }
    setIsLoading(false);
  }, []);
  const handleBootComplete = useCallback(() => {
    setIsBooting(false);
    loadHistory();
  }, [loadHistory]);
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;
    const userMessage: Message = {
      id: crypto.randomUUID(),
      role: 'user',
      content: input.trim(),
      timestamp: Date.now(),
    };
    setMessages((prev) => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);
    setStreamingMessage('');
    try {
      await chatService.sendMessage(currentInput, undefined, (chunk) => {
        setStreamingMessage((prev) => prev + chunk);
      });
      const response = await chatService.getMessages();
      if (response.success && response.data) {
        setMessages(response.data.messages);
      }
    } catch (error) {
      console.error("Error sending message:", error);
      const errorMessage: Message = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: 'Error: Connection to the archive has been lost. Please try again later.',
        timestamp: Date.now(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setStreamingMessage('');
    }
  };
  return (
    <div className="bg-retro-dark text-retro-green font-mono min-h-screen w-full flex flex-col items-center justify-center p-4 sm:p-6 lg:p-8 relative">
      <CrtEffect />
      <div className="w-full max-w-7xl mx-auto flex flex-col h-full flex-grow relative z-10">
        <header className="text-center py-4 md:py-6 lg:py-8">
          <h1 className="text-2xl md:text-4xl lg:text-5xl font-bold text-retro-green tracking-widest animate-text-glitch" style={{ textShadow: '0 0 5px #39ff14, 0 0 10px #39ff14' }}>
            CIPHER MASONS
          </h1>
        </header>
        <main className="flex-grow flex flex-col w-full min-h-0">
          <Card className="bg-black/50 border-retro-green/20 shadow-[0_0_20px_rgba(57,255,20,0.2)] flex-grow flex flex-col h-full">
            <CardContent className="p-0 flex-grow flex flex-col h-full">
              {isBooting ? (
                <BootSequence onComplete={handleBootComplete} />
              ) : (
                <>
                  <TerminalOutput messages={messages} streamingMessage={streamingMessage} isLoading={isLoading && messages.length === 0} />
                  <div className="p-4 border-t border-retro-green/20">
                    <TerminalInput
                      input={input}
                      setInput={setInput}
                      handleSendMessage={handleSendMessage}
                      isLoading={isLoading}
                    />
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        </main>
        <footer className="text-center py-4 text-xs text-retro-green/50">
          <p>Disclaimer: This is a work of fiction. The narrative is generated by an AI and for entertainment purposes only.</p>
          <p>AI usage is rate-limited. Built with ❤️ at Cloudflare.</p>
        </footer>
      </div>
    </div>
  );
}